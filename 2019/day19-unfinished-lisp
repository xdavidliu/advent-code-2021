(load "~/Documents/aoc/util.lisp")
(load "~/Documents/aoc/intcode.lisp")

(defun get-beam-state (cmp x y)
  (setf (computer-input cmp) x)
  (run-til-io-or-end cmp)
  (setf (computer-input cmp) y)
  (run-til-output-or-end cmp)
  (computer-output cmp))

(defparameter *input-vec* (read-input "~/Documents/aoc/input19.txt"))

(let* ((nx 50)
       (ny 50)
       (grid (make-black-grid ny nx #\.)))
  (dotimes (y ny)
    (dotimes (x nx)
      (let ((cmp (new-computer *input-vec*)))
	(when (= 1 (get-beam-state cmp x y))
	  (setf (elt (elt grid y) x) #\#)))))
  (debug-grid grid))

(let ((count 0))
  (dotimes (y 50)
    (dotimes (x 50)
      (let ((cmp (new-computer *input-vec*)))
	(when (= 1 (get-beam-state cmp x y))
	  (incf count)))))
  (format t "part 1 = ~A~%" count))
;; 211

(let ((cmp (new-computer *input-vec*)))
  (get-beam-state cmp 731 1000))  ;; 1

(let ((cmp (new-computer *input-vec*)))
  (get-beam-state cmp 901 1000))  ;; 1



(let* ((input-vec (read-input "~/Documents/aoc/input19.txt"))
       (cmp (new-computer input-vec)))
  (get-beam-state cmp 0 0))
  
  (dotimes (y 10)
    (dotimes (x 10)
      (let ((cmp (new-computer input-vec)))
	(when (= 1 (get-beam-state cmp x y))
	  (setf (elt (elt grid y) x) #\#)))))
  (debug-grid grid))
